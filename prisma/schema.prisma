// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  organization
}

model User {
  id             String        @id @default(uuid())
  firstName      String
  lastName       String
  email          String        @unique
  password       String
  role           Role          @default(user)
  createdAt      DateTime      @default(now())
  userAddress    UserAddress[]
  userContact    UserContact[]
  donation       Donation[]
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?       
}

model UserAddress {
  id       String @id @default(uuid())
  user     User   @relation(fields: [userId], references: [id])
  userId   String @unique
  street   String
  city     String
  state    String
  postcode String
}

model UserContact {
  id          String @id @default(uuid())
  user        User   @relation(fields: [userId], references: [id])
  userId      String @unique
  phoneNumber String
}

enum DonationStatus {
  completed
  pending
  reserved
}

enum TransportationMethod {
  request_for_pickup
  deliver_to_organization
}

model Donation {
  id                   String               @id @default(uuid())
  user                 User                 @relation(fields: [userId], references: [id])
  userId               String               @unique
  title                String
  description          String
  foodType             String
  donationSize         String
  transportationMethod TransportationMethod
  status               DonationStatus       @default(pending)
  createdAt            String
  Reservation          Reservation[]
}

model Organization {
  id                  String                @id @default(uuid())
  user                User[]
  organizationName    String
  memberKey           String                @unique
  createdAt           DateTime              @default(now())
  organizationAddress OrganizationAddress[]
  organizationContact OrganizationContact[]
  Reservation         Reservation[]
}

model OrganizationAddress {
  id             String       @id @default(uuid())
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @unique
  street         String
  city           String
  state          String
  postcode       String
}

model OrganizationContact {
  id             String       @id @default(uuid())
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @unique
  phoneNumber    String
}

enum ReservationStatus {
  pending
  completed
  cancelled
}

model Reservation {
  id             String       @id @default(uuid())
  donation       Donation     @relation(fields: [donationId], references: [id])
  donationId     String       @unique
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @unique
  status         String
  createdAt      DateTime     @default(now())
}
